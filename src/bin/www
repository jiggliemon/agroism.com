#!/usr/bin/env nodemon

/**
 * Module dependencies.
 */

const app = require('../index');
const debug = require('debug')('src:server');

if (app.get('env') == 'development') {
  const http = require('http');
  const server = http.createServer(app);
  /**
   * Get port from environment and store in Express.
   */

  const port = normalizePort(process.env.PORT || '5050');
  app.set('port', port);
  /**
   * Listen on provided port, on all network interfaces.
   */

  server.listen(port);
  server.on('error', onError);
  server.on('listening', onListening);

  /**
   * Event listener for HTTP server "listening" event.
   */

  function onListening() {
    
    var addr = server.address();
    var bind = typeof addr === 'string'
      ? 'pipe ' + addr
      : 'port ' + addr.port;
    debug('Listening on ' + bind);
  }

} else {

  const glex = require('greenlock-express');

  /**
   * Get port from environment and store in Express.
   */
  const port = process.env.PORT || '5050';
  app.set('port', port);

  //require('greenlock-express')
  glex.create({

    // Let's Encrypt v2 is ACME draft 11
    version: 'draft-11'

    // You MUST change 'acme-staging-v02' to 'acme-v02' in production
  , server: 'https://acme-staging-v02.api.letsencrypt.org/directory'  // staging

    // You MUST change this to a valid email address
  , email: 'chase@agroism.com'

    // You MUST NOT build clients that accept the ToS without asking the user
  , agreeTos: true

    // You MUST change these to valid domains
    // NOTE: all domains will validated and listed on the certificate
  , approveDomains: [ 'agroism.com' ]

    // You MUST have access to write to directory where certs are saved
    // ex: /home/foouser/acme/etc
  , configDir: require('path').join(require('os').homedir(), 'acme', 'etc')

  , app

  //, debug: true

  }).listen(port, 443);
}

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

